{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samee\\\\Projects\\\\ai_language_tutor\\\\frontend\\\\src\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatInterface() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSend = () => {\n    if (!input.trim()) return;\n    const newMessage = {\n      role: 'user',\n      content: input\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setInput('');\n    setIsLoading(true);\n    setTimeout(() => {\n      const botReply = {\n        role: 'tutor',\n        content: `Echo: ${newMessage.content}`\n      };\n      setMessages(prev => [...prev, botReply]);\n      setIsLoading(false);\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${darkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: darkMode ? 'active' : '',\n        onClick: () => setDarkMode(!darkMode),\n        children: darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.role}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => e.key === 'Enter' && handleSend(),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          disabled: !input.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatInterface, \"fXgo1cd3Mb86HyQLJRxIah5I3Ec=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","input","setInput","isLoading","setIsLoading","darkMode","setDarkMode","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","newMessage","role","content","prev","setTimeout","botReply","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","idx","ref","type","value","onChange","e","target","onKeyDown","key","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/samee/Projects/ai_language_tutor/frontend/src/ChatInterface.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './styles.css';\r\n\r\nfunction ChatInterface() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSend = () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessage = { role: 'user', content: input };\r\n    setMessages(prev => [...prev, newMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n\r\n    setTimeout(() => {\r\n      const botReply = {\r\n        role: 'tutor',\r\n        content: `Echo: ${newMessage.content}`,\r\n      };\r\n      setMessages(prev => [...prev, botReply]);\r\n      setIsLoading(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className={`app ${darkMode ? 'dark-mode' : ''}`}>\r\n      <div className=\"mode-toggle\">\r\n        <button\r\n          className={darkMode ? 'active' : ''}\r\n          onClick={() => setDarkMode(!darkMode)}\r\n        >\r\n          {darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"chat-container\">\r\n        <div className=\"messages\">\r\n          {messages.map((msg, idx) => (\r\n            <div key={idx} className={`message ${msg.role}`}>\r\n              <div className=\"message-content\">\r\n                <p>{msg.content}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          {isLoading && (\r\n            <div className=\"typing-indicator\">\r\n              <span></span><span></span><span></span>\r\n            </div>\r\n          )}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        <div className=\"input-area\">\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={e => setInput(e.target.value)}\r\n            onKeyDown={e => e.key === 'Enter' && handleSend()}\r\n            placeholder=\"Type your message...\"\r\n          />\r\n          <button onClick={handleSend} disabled={!input.trim()}>\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}